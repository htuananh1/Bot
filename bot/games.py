"""Game engine and orchestration for all games."""

from __future__ import annotations

import asyncio
import logging
import random
import time
from dataclasses import dataclass
from typing import Dict, Optional

from openai import OpenAI

from .games import DailyGame, DiceGame, FishingGame, MiningGame, SlotsGame, WorkGame
from .storage import UserState, UserStore


COOLDOWN_SECONDS = 20 * 60  # 20 minutes between work commands
DAILY_RESET = 20 * 60 * 60  # 20 hours


LOGGER = logging.getLogger(__name__)


@dataclass
class GameResult:
    message: str
    coins_delta: int = 0


class GameError(RuntimeError):
    pass


class LanguageOracle:
    """Thin wrapper around the OpenAI client for language-heavy games."""

    def __init__(self, client: OpenAI) -> None:
        self._client = client

    async def _generate(self, system_prompt: str, user_prompt: str, *, max_tokens: int = 400) -> str:
        loop = asyncio.get_running_loop()
        return await loop.run_in_executor(
            None,
            self._call,
            system_prompt,
            user_prompt,
            max_tokens,
        )

    def _call(self, system_prompt: str, user_prompt: str, max_tokens: int) -> str:
        response = self._client.chat.completions.create(
            model="openai/gpt-20-oss",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
            temperature=0.8,
            max_tokens=max_tokens,
        )
        return response.choices[0].message.content.strip()

    async def word_chain(self, start_word: str) -> str:
        system_prompt = (
            "B·∫°n l√† MC d·∫´n d·∫Øt tr√≤ ch∆°i n·ªëi t·ª´ ti·∫øng Vi·ªát. "
            "H√£y lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, g·ªçn g√†ng, nhi·ªát huy·∫øt."
        )
        user_prompt = (
            "T·∫°o m·ªôt l∆∞·ª£t ch∆°i n·ªëi t·ª´ b·∫Øt ƒë·∫ßu b·∫±ng t·ª´ "
            f"'{start_word}'. Li·ªát k√™ √≠t nh·∫•t 6 l∆∞·ª£t n·ªëi ti·∫øp nhau, "
            "m·ªói l∆∞·ª£t d·∫°ng 'A ‚Üí B' tr√™n m·ªôt d√≤ng. "
            "Gi·∫£i th√≠ch ng·∫Øn (t·ªëi ƒëa 10 t·ª´) n·∫øu c·∫ßn ngay sau t·ª´ b·∫±ng ngo·∫∑c ƒë∆°n."
        )
        return await self._generate(system_prompt, user_prompt)

    async def vietnamese_king(self) -> str:
        system_prompt = (
            "B·∫°n l√† gi√°m kh·∫£o ch∆∞∆°ng tr√¨nh Vua Ti·∫øng Vi·ªát. "
            "T·∫°o th·ª≠ th√°ch s√°ng t·∫°o, th√¢n thi·ªán cho ng∆∞·ªùi ch∆°i luy·ªán ti·∫øng Vi·ªát."
        )
        user_prompt = (
            "Vi·∫øt m·ªôt th·ª≠ th√°ch g·ªìm ba ph·∫ßn: \n"
            "1. Kh·ªüi ƒë·ªông b·∫±ng m·ªôt c√¢u ƒë·ªë m·∫πo ng·∫Øn.\n"
            "2. Th·ª≠ th√°ch t·ª´ v·ª±ng v·ªõi 3 t·ª´ kh√≥, y√™u c·∫ßu ng∆∞·ªùi ch∆°i gi·∫£i nghƒ©a.\n"
            "3. B√†i t·∫≠p ƒë·∫∑t c√¢u v·ªõi m·ªôt th√†nh ng·ªØ ho·∫∑c t·ª•c ng·ªØ.\n"
            "H√£y ƒë·ªãnh d·∫°ng r√µ r√†ng b·∫±ng danh s√°ch ƒë√°nh s·ªë."
        )
        return await self._generate(system_prompt, user_prompt, max_tokens=500)


class GameEngine:
    """Coordinate game commands and persistence operations."""

    def __init__(self, store: UserStore, language_oracle: Optional[LanguageOracle] = None) -> None:
        self.store = store
        self._locks: Dict[int, asyncio.Lock] = {}
        self.language_oracle = language_oracle
        
        # Initialize game modules
        self.work_game = WorkGame(store)
        self.dice_game = DiceGame(store)
        self.slots_game = SlotsGame(store)
        self.daily_game = DailyGame(store)
        self.fishing_game = FishingGame(store)
        self.mining_game = MiningGame(store)

    def _lock_for(self, user_id: int) -> asyncio.Lock:
        if user_id not in self._locks:
            self._locks[user_id] = asyncio.Lock()
        return self._locks[user_id]

    async def ensure_ready(self, user_id: int) -> UserState:
        async with self._lock_for(user_id):
            return await self.store.get(user_id)

    async def apply_reward(self, user_id: int, coins: int) -> UserState:
        async with self._lock_for(user_id):
            state = await self.store.get(user_id)
            state.coins = max(0, state.coins + coins)
            await self.store.save()
            return state

    async def play_work(self, user_id: int) -> GameResult:
        try:
            message, coins_delta = await self.work_game.play(user_id)
            return GameResult(message=message, coins_delta=coins_delta)
        except ValueError as error:
            raise GameError(str(error)) from error

    async def play_dice(self, user_id: int) -> GameResult:
        message, coins_delta = await self.dice_game.play(user_id)
        return GameResult(message=message, coins_delta=coins_delta)

    async def play_slots(self, user_id: int) -> GameResult:
        message, coins_delta = await self.slots_game.play(user_id)
        return GameResult(message=message, coins_delta=coins_delta)

    async def play_daily(self, user_id: int) -> GameResult:
        try:
            message, coins_delta = await self.daily_game.play(user_id)
            return GameResult(message=message, coins_delta=coins_delta)
        except ValueError as error:
            raise GameError(str(error)) from error

    async def play_fishing(self, user_id: int) -> GameResult:
        message, coins_delta = await self.fishing_game.play(user_id)
        return GameResult(message=message, coins_delta=coins_delta)

    async def play_mining(self, user_id: int) -> GameResult:
        message, coins_delta = await self.mining_game.play(user_id)
        return GameResult(message=message, coins_delta=coins_delta)

    async def play_word_chain(self, user_id: int) -> GameResult:
        if not self.language_oracle:
            raise GameError(
                "T√≠nh nƒÉng n·ªëi t·ª´ c·∫ßn c·∫•u h√¨nh AI_GATEWAY_API_KEY ƒë·ªÉ g·ªçi m√¥ h√¨nh ng√¥n ng·ªØ."
            )

        start_word = random.choice(
            ["√°nh s√°ng", "n√¥ng d√¢n", "h·∫£i ƒëƒÉng", "thi√™n nhi√™n", "c·ªông ƒë·ªìng", "kh·ªüi nghi·ªáp"]
        )
        try:
            sequence = await self.language_oracle.word_chain(start_word)
        except Exception as error:  # pragma: no cover - defensive logging
            LOGGER.exception("Word chain generation failed: %s", error)
            raise GameError("Kh√¥ng th·ªÉ t·∫°o l∆∞·ª£t ch∆°i n·ªëi t·ª´ l√∫c n√†y, th·ª≠ l·∫°i sau nh√©!") from error

        reward = random.randint(90, 180)
        await self.apply_reward(user_id, reward)
        return GameResult(
            message=(
                "üîó Tr√≤ ch∆°i n·ªëi t·ª´!\n"
                f"T·ª´ kh·ªüi ƒë·ªông: {start_word}\n"
                f"{sequence}\n\n"
                f"B·∫°n nh·∫≠n ƒë∆∞·ª£c {reward}üí∞ cho s·ª± nhanh tr√≠!"
            ),
            coins_delta=reward,
        )

    async def play_vietnamese_king(self, user_id: int) -> GameResult:
        if not self.language_oracle:
            raise GameError(
                "Vua Ti·∫øng Vi·ªát c·∫ßn c·∫•u h√¨nh AI_GATEWAY_API_KEY ƒë·ªÉ k√≠ch ho·∫°t th·ª≠ th√°ch ng√¥n ng·ªØ."
            )

        try:
            challenge = await self.language_oracle.vietnamese_king()
        except Exception as error:  # pragma: no cover - defensive logging
            LOGGER.exception("Vietnamese king generation failed: %s", error)
            raise GameError("Kh√¥ng th·ªÉ t·∫°o th·ª≠ th√°ch Vua Ti·∫øng Vi·ªát, b·∫°n th·ª≠ l·∫°i gi√∫p m√¨nh nh√©!") from error

        reward = random.randint(110, 220)
        await self.apply_reward(user_id, reward)
        return GameResult(
            message=(
                "üëë Th·ª≠ th√°ch Vua Ti·∫øng Vi·ªát!\n"
                f"{challenge}\n\n"
                f"Ho√†n th√†nh v√† b·∫°n ƒë∆∞·ª£c th∆∞·ªüng {reward}üí∞. C·ªë l√™n n√†o!"
            ),
            coins_delta=reward,
        )


__all__ = ["GameEngine", "GameResult", "GameError", "LanguageOracle"]
